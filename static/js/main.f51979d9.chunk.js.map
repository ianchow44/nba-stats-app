{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSubmit","e","preventDefault","console","log","state","playerName","length","alert","getPlayerId","handleChange","event","replace","target","value","split","join","setState","axios","get","then","a","res","undefined","data","getPlayerStats","id","catch","err","playerId","playerStats","className","onSubmit","this","type","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAmFeA,E,kDA/Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAOVC,aAAe,SAACC,GACdA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,MAAMC,aAClB,EAAKD,MAAMC,YAAc,EAAKD,MAAMC,WAAWC,OAAS,EAC3DC,MAAM,8BAGN,EAAKC,eAfW,EAmBpBC,aAAe,SAACC,GACd,IAAMC,EAAUD,EAAME,OAAOC,MAAMC,MAAM,KAAKC,KAAK,KAChDJ,EAAQL,OAAS,GAClB,EAAKU,SAAS,CAACX,WAAYM,KAtBX,EA0BlBH,YAAc,WACZS,IAAMC,IAAN,2DAA8D,EAAKd,MAAMC,aACxEc,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,8DAEoBE,IAArBD,EAAIE,KAAKA,KAAK,GAFb,gBAGFhB,MAAM,uDAHJ,4BAIMc,EAAIE,KAAKA,KAAKjB,OAAS,GAJ7B,gBAKFC,MAAM,kCALJ,wCAOI,EAAKiB,eAAeH,EAAIE,KAAKA,KAAK,GAAGE,IAPzC,4CADN,uDAWGC,OAAM,SAAAC,GACPzB,QAAQC,IAAIwB,OAvCE,EA2ClBH,eAAiB,SAACI,GAChBX,IAAMC,IAAN,qFAAwFU,IACvFT,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,sDACJlB,QAAQC,IAAIkB,EAAIE,KAAKA,MACrB,EAAKP,SAAS,CAAEa,YAAaR,EAAIE,KAAKA,KAAK,KAFvC,2CADN,uDAIGG,OAAM,SAAAC,GACPzB,QAAQC,IAAIwB,OA/Cd,EAAKvB,MAAM,CACTC,WAAY,KACZwB,YAAa,IAJC,E,0CAqDlB,WACA,OACE,sBAAKC,UAAU,MAAf,UACC,uBAAMC,SAAUC,KAAKjC,aAArB,UACE,yCAEE,uBACCkC,KAAK,OACLpB,MAAOmB,KAAK5B,MAAMS,MAClBqB,SAAUF,KAAKvB,aACf0B,YAAY,iCAGf,uBAAOF,KAAK,SAASpB,MAAM,cAX9B,iBAagBmB,KAAK5B,MAAMyB,YAAX,aACf,uBAdD,oBAemBG,KAAK5B,MAAMyB,YAAX,IAClB,uBAhBD,sBAiBqBG,KAAK5B,MAAMyB,YAAX,IACpB,uBAlBD,qBAmBoBG,KAAK5B,MAAMyB,YAAX,W,GA3ENO,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f51979d9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      playerName: null,\n      playerStats: {}\n    }\n  }\n\nhandleSubmit = (e) => {\n  e.preventDefault();\n  console.log(this.state.playerName)\n  if (!this.state.playerName || this.state.playerName.length < 1) {\n    alert(\"Please type player's name!\")\n  } \n  else {\n    this.getPlayerId()\n  }\n}\n\nhandleChange = (event) => {\n  const replace = event.target.value.split(\" \").join(\"_\");\n  if(replace.length > 0){\n    this.setState({playerName: replace})\n  } \n}\n\n  getPlayerId = () => {\n    axios.get(`https://www.balldontlie.io/api/v1/players?search=${this.state.playerName}`)\n    .then(async res => {\n      // console.log(res.data.data)\n      if(res.data.data[0] === undefined){\n        alert(\"This player is either injured or hasn't played yet!\")\n      } else if(res.data.data.length > 1){\n        alert(\"Pleases specify the name more!\")\n      } else{\n        await this.getPlayerStats(res.data.data[0].id)\n\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  getPlayerStats = (playerId) => {\n    axios.get(`https://www.balldontlie.io/api/v1/season_averages?season=2020&player_ids[]=${playerId}`)\n    .then(async res => {\n      console.log(res.data.data)\n      this.setState({ playerStats: res.data.data[0]})\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n  \n  render(){\n  return (\n    <div className=\"App\">\n     <form onSubmit={this.handleSubmit}>\n       <label>\n         Name\n         <input \n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          placeholder=\"please enter players name\"\n         />\n       </label>\n       <input type=\"submit\" value=\"Submit\"/>\n     </form>\n     games played: {this.state.playerStats[\"games_played\"]}\n     <br />\n     points averaged: {this.state.playerStats[\"pts\"]}\n     <br />\n     rebounds averaged: {this.state.playerStats[\"reb\"]}\n     <br />\n     assists averaged: {this.state.playerStats[\"ast\"]}\n    </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}