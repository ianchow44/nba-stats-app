{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","playerName","setplayerName","playerStats","setplayerStats","value","classes","makeStyles","theme","root","margin","spacing","width","useStyles","getPlayerId","playerId","console","log","axios","get","split","join","then","a","res","undefined","data","alert","length","getPlayerStats","id","catch","err","className","noValidate","autoComplete","TextField","label","variant","onSubmit","e","preventDefault","type","onChange","event","target","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSA6HeA,EAtHH,WAAO,IAAD,EAEoBC,mBAAS,MAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGsBF,mBAAS,IAH/B,mBAGTG,EAHS,KAGIC,EAHJ,OAIAJ,qBAATK,EAJS,oBAeVC,EATYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,YAKGC,GAiBVC,EAAc,SAACC,GACnBC,QAAQC,IAAIF,GACZG,IAAMC,IAAN,2DAA8DlB,EAAWmB,MAAM,KAAKC,KAAK,OACxFC,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,8DACkBE,IAArBD,EAAIE,KAAKA,KAAK,GADX,gBAEJC,MAAM,uDAFF,4BAGIH,EAAIE,KAAKA,KAAKE,OAAS,GAH3B,gBAIJD,MAAM,kCAJF,wCAMIE,EAAeL,EAAIE,KAAKA,KAAK,GAAGI,IANpC,4CADN,uDASKC,OAAM,SAAAC,GACPhB,QAAQC,IAAIe,OASZH,EAAiB,SAACd,GACtBG,IAAMC,IAAN,qFAAwFJ,IACvFO,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,sDACJP,QAAQC,IAAIO,EAAIE,KAAKA,MACrBtB,EAAeoB,EAAIE,KAAKA,KAAK,IAFzB,2CADN,uDAIGK,OAAM,SAAAC,GACPhB,QAAQC,IAAIe,OAIhB,OACI,gCACE,uBAAMC,UAAW3B,EAAQG,KAAMyB,YAAU,EAACC,aAAa,MAAvD,UACF,cAACC,EAAA,EAAD,CAAWN,GAAG,iBAAiBO,MAAM,aACrC,cAACD,EAAA,EAAD,CAAWN,GAAG,eAAeO,MAAM,SAASC,QAAQ,WACpD,cAACF,EAAA,EAAD,CAAWN,GAAG,iBAAiBO,MAAM,WAAWC,QAAQ,gBAGtD,+CAGA,uBAAMC,SAzDS,SAACC,GACpBA,EAAEC,iBACFzB,QAAQC,IAAIhB,IACPA,GAAcA,EAAW2B,OAAS,EACrCD,MAAM,8BAGNb,KAkDE,UACE,yCAEE,uBACE4B,KAAK,OACLrC,MAAOA,EACPsC,SApDS,SAACC,GACpB1C,EAAc0C,EAAMC,OAAOxC,QAoDjByC,YAAY,iCAGhB,uBAAOJ,KAAK,SAASrC,MAAM,cApB/B,WAsBWF,EAAW,IACpB,uBAvBF,aAwBaA,EAAW,IACtB,uBAzBF,YA0BYA,EAAW,IACrB,uBA3BF,WA4BWA,EAAW,IACpB,uBA7BF,WA8BWA,EAAW,IACpB,uBA/BF,cAgCcA,EAAW,SACvB,uBAjCF,qBAkCqBA,EAAW,IAC9B,uBAnCF,0BAoC0BA,EAAW,IACnC,uBArCF,qBAsCqBA,EAAW,IAC9B,uBAvCF,0BAwC0BA,EAAW,IACnC,sDAzCF,0BA4C0BA,EAAW,OACnC,uBA7CF,sCA8CsCA,EAAW,QAC/C,uBA/CF,0BAgD0BA,EAAW,OACnC,2BC5GO4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ea554b6f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst App = () => {\n\n  const [playerName, setplayerName] = useState(null)\n  const [playerStats, setplayerStats] = useState({})\n  const [value] = useState()\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(playerName)\n    if (!playerName || playerName.length < 1) {\n      alert(\"Please type player's name!\")\n    } \n    else {\n      getPlayerId()\n    }\n  }\n\n  const handleChange = (event) => {\n    setplayerName(event.target.value)\n  }\n\n  const getPlayerId = (playerId) => {\n    console.log(playerId)\n    axios.get(`https://www.balldontlie.io/api/v1/players?search=${playerName.split(\" \").join(\"_\")}`)\n    .then(async res => {\n    if(res.data.data[0] === undefined){\n      alert(\"This player is either injured or hasn't played yet!\")\n    } else if(res.data.data.length > 1){\n      alert(\"Pleases specify the name more!\")\n      } else{\n        await getPlayerStats(res.data.data[0].id)\n        }\n      }).catch(err => {\n        console.log(err)\n      })\n    }\n\n    // const geteFG = () => {\n      // this.setState({testing:(this.state.playerStats[\"fgm\"] + (0.5 * this.state.playerStats[\"fg3m\"])) / (this.state.playerStats[\"fga\"])})\n    //   setTesting(playerStats[\"fgm\"] + (0.5 * playerStats[\"fg3m\"])) / (playerStats[\"fga\"])\n    // }\n\n  const getPlayerStats = (playerId) => {\n    axios.get(`https://www.balldontlie.io/api/v1/season_averages?season=2020&player_ids[]=${playerId}`)\n    .then(async res => {\n      console.log(res.data.data)\n      setplayerStats(res.data.data[0])\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  return (\n      <div>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"standard-basic\" label=\"Standard\" />\n      <TextField id=\"filled-basic\" label=\"Filled\" variant=\"filled\" />\n      <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" />\n    </form>\n\n        <h1>\n          NBA Stats App\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Name\n            <input \n              type=\"text\"\n              value={value}\n              onChange={handleChange}\n              placeholder=\"please enter players name\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n        Points: {playerStats[\"pts\"]}\n        <br />\n        Rebounds: {playerStats[\"reb\"]}\n        <br />\n        Assists: {playerStats[\"ast\"]}\n        <br />\n        Steals: {playerStats[\"stl\"]}\n        <br />\n        Blocks: {playerStats[\"blk\"]}\n        <br />\n        Turnovers: {playerStats[\"turnover\"]}\n        <br />\n        Field Goals Made: {playerStats[\"fgm\"]}\n        <br />\n        Field Goals Attempted: {playerStats[\"fga\"]}\n        <br />\n        Free Throws Made: {playerStats[\"ftm\"]}\n        <br/>\n        Free Throws Attempted: {playerStats[\"fta\"]}\n        <h2>\n        Shooting Percentages\n        </h2>\n        Field Goal Percentage: {playerStats[\"fg_pct\"]}\n        <br/>\n        Three Point Field Goal Percentage: {playerStats[\"fg3_pct\"]}\n        <br/>\n        Free Throw Percentage: {playerStats[\"ft_pct\"]}\n        <br/> \n      </div>\n   \n  );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}