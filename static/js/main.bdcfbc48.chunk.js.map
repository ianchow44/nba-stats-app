{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","playerName","setplayerName","playerStats","setplayerStats","value","useStyles","makeStyles","theme","test","text","alignContent","display","styles","flexDirection","root","margin","spacing","getPlayerId","playerId","console","log","axios","get","split","join","then","a","res","undefined","data","alert","length","getPlayerStats","id","catch","err","classes","className","onSubmit","e","preventDefault","TextField","label","type","onChange","event","target","placeholder","Button","variant","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRA6IeA,EAtIH,WAAO,IAAD,EAEoBC,mBAAS,MAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGsBF,mBAAS,IAH/B,mBAGTG,EAHS,KAGIC,EAHJ,OAIAJ,qBAATK,EAJS,oBAMVC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,GAGNC,KAAM,CACJC,aAAc,SACdC,QAAS,gBAEXC,OAAQ,CACND,QAAS,OACTE,cAAe,OAGjBC,KAAM,CACJ,QAAS,CACPC,OAAQR,EAAMS,QAAQ,GACtBL,QAAS,qBAqBTM,EAAc,SAACC,GACnBC,QAAQC,IAAIF,GACZG,IAAMC,IAAN,2DAA8DtB,EAAWuB,MAAM,KAAKC,KAAK,OACxFC,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,8DACkBE,IAArBD,EAAIE,KAAKA,KAAK,GADX,gBAEJC,MAAM,uDAFF,4BAGIH,EAAIE,KAAKA,KAAKE,OAAS,GAH3B,gBAIJD,MAAM,kCAJF,wCAMIE,EAAeL,EAAIE,KAAKA,KAAK,GAAGI,IANpC,4CADN,uDASKC,OAAM,SAAAC,GACPhB,QAAQC,IAAIe,OASZH,EAAiB,SAACd,GACtBG,IAAMC,IAAN,qFAAwFJ,IACvFO,KADD,+BAAAC,EAAA,MACM,WAAMC,GAAN,SAAAD,EAAA,sDACJP,QAAQC,IAAIO,EAAIE,KAAKA,MACrB1B,EAAewB,EAAIE,KAAKA,KAAK,IAFzB,2CADN,uDAIGK,OAAM,SAAAC,GACPhB,QAAQC,IAAIe,OAIVC,EAAU/B,IAEhB,OACE,mCACE,sBAAKgC,UAAaD,EAAQ5B,KAA1B,UACE,gDAGA,qBAAK6B,UAAaD,EAAQxB,OAA1B,SACE,uBAAM0B,SAvDO,SAACC,GACpBA,EAAEC,iBACFrB,QAAQC,IAAIpB,IACPA,GAAcA,EAAW+B,OAAS,EACrCD,MAAM,8BAGNb,KAgDI,UACE,cAACwB,EAAA,EAAD,CACEC,MAAQ,cACRC,KAAK,OACLvC,MAAOA,EACPwC,SAjDS,SAACC,GACpB5C,EAAc4C,EAAMC,OAAO1C,QAiDjB2C,YAAY,4BACZV,UAAaD,EAAQ3B,OAEvB,qBAAK4B,UAAWD,EAAQtB,KAAxB,SACE,cAACkC,EAAA,EAAD,CACEC,QAAQ,YACRN,KAAK,SACLvC,MAAM,SACN8C,MAAM,UAJR,2BAfR,WAwBWhD,EAAW,IACpB,uBAzBF,aA0BaA,EAAW,IACtB,uBA3BF,YA4BYA,EAAW,IACrB,uBA7BF,WA8BWA,EAAW,IACpB,uBA/BF,WAgCWA,EAAW,IACpB,uBAjCF,cAkCcA,EAAW,SACvB,uBAnCF,qBAoCqBA,EAAW,IAC9B,uBArCF,0BAsC0BA,EAAW,IACnC,uBAvCF,qBAwCqBA,EAAW,IAC9B,uBAzCF,0BA0C0BA,EAAW,IACnC,sDA3CF,0BA8C0BA,EAAW,OACnC,uBA/CF,sCAgDsCA,EAAW,QAC/C,uBAjDF,0BAkD0BA,EAAW,OACnC,6BC5HOiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bdcfbc48.chunk.js","sourcesContent":["import React, {useState} from 'react';\n// import NavBar from \"./Components/NavBar\"\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Button} from '@material-ui/core';\n\nconst App = () => {\n\n  const [playerName, setplayerName] = useState(null)\n  const [playerStats, setplayerStats] = useState({})\n  const [value] = useState()\n\n  const useStyles = makeStyles((theme) => ({\n    test: {\n      // backgroundColor: \"#800\",\n    },\n    text: {\n      alignContent: 'center', \n      display: \"inline-block\"\n    },\n    styles: {\n      display: \"flex\",\n      flexDirection: \"row\",\n\n    },\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        display: \"inline-block\"\n      },\n    },\n  }));\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(playerName)\n    if (!playerName || playerName.length < 1) {\n      alert(\"Please type player's name!\")\n    } \n    else {\n      getPlayerId()\n    }\n  }\n\n  const handleChange = (event) => {\n    setplayerName(event.target.value)\n  }\n\n  const getPlayerId = (playerId) => {\n    console.log(playerId)\n    axios.get(`https://www.balldontlie.io/api/v1/players?search=${playerName.split(\" \").join(\"_\")}`)\n    .then(async res => {\n    if(res.data.data[0] === undefined){\n      alert(\"This player is either injured or hasn't played yet!\")\n    } else if(res.data.data.length > 1){\n      alert(\"Pleases specify the name more!\")\n      } else{\n        await getPlayerStats(res.data.data[0].id)\n        }\n      }).catch(err => {\n        console.log(err)\n      })\n    }\n\n    // const geteFG = () => {\n      // this.setState({testing:(this.state.playerStats[\"fgm\"] + (0.5 * this.state.playerStats[\"fg3m\"])) / (this.state.playerStats[\"fga\"])})\n    //   setTesting(playerStats[\"fgm\"] + (0.5 * playerStats[\"fg3m\"])) / (playerStats[\"fga\"])\n    // }\n\n  const getPlayerStats = (playerId) => {\n    axios.get(`https://www.balldontlie.io/api/v1/season_averages?season=2020&player_ids[]=${playerId}`)\n    .then(async res => {\n      console.log(res.data.data)\n      setplayerStats(res.data.data[0])\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const classes = useStyles();  \n\n  return (\n    <>\n      <div className = {classes.test}>\n        <div>\n          NBA Stats App\n        </div>\n        <div className = {classes.styles}>\n          <form onSubmit={handleSubmit}>\n            <TextField\n              label = \"Player Name\"\n              type=\"text\"\n              value={value}\n              onChange={handleChange}\n              placeholder=\"please enter players name\"\n              className = {classes.text}\n            />\n            <div className={classes.root}>\n              <Button \n                variant=\"contained\" \n                type=\"submit\" \n                value=\"Submit\" \n                color=\"primary\" \n              >Submit</Button>\n            </div>\n          </form>\n        </div>\n        Points: {playerStats[\"pts\"]}\n        <br />\n        Rebounds: {playerStats[\"reb\"]}\n        <br />\n        Assists: {playerStats[\"ast\"]}\n        <br />\n        Steals: {playerStats[\"stl\"]}\n        <br />\n        Blocks: {playerStats[\"blk\"]}\n        <br />\n        Turnovers: {playerStats[\"turnover\"]}\n        <br />\n        Field Goals Made: {playerStats[\"fgm\"]}\n        <br />\n        Field Goals Attempted: {playerStats[\"fga\"]}\n        <br />\n        Free Throws Made: {playerStats[\"ftm\"]}\n        <br/>\n        Free Throws Attempted: {playerStats[\"fta\"]}\n        <h2>\n        Shooting Percentages\n        </h2>\n        Field Goal Percentage: {playerStats[\"fg_pct\"]}\n        <br/>\n        Three Point Field Goal Percentage: {playerStats[\"fg3_pct\"]}\n        <br/>\n        Free Throw Percentage: {playerStats[\"ft_pct\"]}\n        <br/> \n      </div>\n     </>\n  );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}